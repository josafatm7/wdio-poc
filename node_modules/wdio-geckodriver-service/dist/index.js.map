{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import cp, { ChildProcess } from 'node:child_process'\n\nimport fs from 'fs-extra'\nimport geckoDriver from 'geckodriver'\nimport getPort from 'get-port'\nimport tcpPortUsed from 'tcp-port-used'\nimport split2 from 'split2'\nimport logger from '@wdio/logger'\nimport type { Capabilities, Options } from '@wdio/types'\n\nimport { isFirefox, getFilePath } from './utils'\nimport {\n    DEFAULT_LOG_FILENAME, POLL_INTERVAL, POLL_TIMEOUT, DEFAULT_PATH,\n    LOCAL_OPTIONS\n} from './constants'\nimport type { GeckodriverServiceOptions } from './types'\n\nconst log = logger('geckodriver')\n\nexport default class GeckoDriverService {\n    private process?: ChildProcess\n\n    private isMultiremote: boolean\n    private port?: number\n    private path: string\n    private geckodriverCustomPath?: string\n    private outputDir?: string\n    private logFileName: string\n    private args: string[]\n\n    constructor (\n        public options: GeckodriverServiceOptions,\n        capabilities: Capabilities.RemoteCapability,\n        public config: Options.Testrunner\n    ) {\n        this.isMultiremote = !(capabilities as Capabilities.Capabilities).browserName\n        this.port = this.options.port\n        this.path = this.options.path || DEFAULT_PATH\n        this.outputDir = this.options.outputDir || config.outputDir\n        this.logFileName = this.options.logFileName || DEFAULT_LOG_FILENAME\n        this.args = this.options.args || []\n    }\n\n    beforeSession (config: Omit<Options.Testrunner, 'capabilities'>, capabilities: Capabilities.RemoteCapability) {\n        return this._startDriver(capabilities)\n    }\n\n    afterSession () {\n        return this._stopDriver()\n    }\n\n    _redirectLogStream () {\n        if (!this.outputDir || !this.process || !this.process.stdout || !this.process.stderr) {\n            return false\n        }\n\n        const logFile = getFilePath(this.outputDir, this.logFileName)\n\n        /**\n         * ensure file & directory exists\n         */\n        fs.ensureFileSync(logFile)\n\n        const logStream = fs.createWriteStream(logFile, { flags: 'w' })\n        this.process.stdout.pipe(logStream)\n        this.process.stderr.pipe(logStream)\n        return true\n    }\n\n    _mapCapabilities (capabilities: Capabilities.RemoteCapability, port: number) {\n        const options = {\n            ...LOCAL_OPTIONS,\n            port,\n            path: this.path\n        }\n\n        if (this.isMultiremote) {\n            for (const cap of Object.values(capabilities as Capabilities.MultiRemoteCapabilities)) {\n                if (isFirefox(cap.capabilities as Capabilities.Capabilities)) {\n                    Object.assign(cap, options)\n                }\n            }\n        } else if (isFirefox(capabilities as Capabilities.Capabilities)) {\n            Object.assign(capabilities, options)\n        }\n    }\n\n    async _startDriver (capabilities: Capabilities.RemoteCapability) {\n        if (!this.args.find((arg) => arg.startsWith('--log')) && this.config.logLevel) {\n            this.args.push(`--log=${this.config.logLevel}`)\n        }\n\n        /**\n         * set driver port\n         */\n        const port = this.port || await getPort()\n        this.args.push(`--port=${port}`)\n\n        /**\n         * update capability connection options to connect\n         * to chromedriver\n         */\n        this._mapCapabilities(capabilities, port)\n\n        let command = this.geckodriverCustomPath || geckoDriver.path\n        log.info(`Start Geckodriver (${command}) with args: ${this.args.join(' ')}`)\n        if (!fs.existsSync(command)) {\n            log.warn('Could not find Geckodriver in default path: ', command)\n            log.warn('Falling back to use global geckodriver bin')\n            command = process && process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver'\n        }\n        this.process = cp.spawn(command, this.args)\n\n        if (!this._redirectLogStream() && this.process.stdout && this.process.stderr) {\n            this.process.stdout.pipe(split2()).on('data', log.info.bind(log))\n            this.process.stderr.pipe(split2()).on('data', log.warn.bind(log))\n        }\n\n        await tcpPortUsed.waitUntilUsed(port, POLL_INTERVAL, POLL_TIMEOUT)\n        process.on('exit', this._stopDriver.bind(this))\n        process.on('SIGINT', this._stopDriver.bind(this))\n        process.on('uncaughtException', this._stopDriver.bind(this))\n    }\n\n    _stopDriver () {\n        if (this.process) {\n            this.process.kill()\n            delete this.process\n        }\n    }\n}\n"]}