"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_child_process_1 = __importDefault(require("node:child_process"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const geckodriver_1 = __importDefault(require("geckodriver"));
const get_port_1 = __importDefault(require("get-port"));
const tcp_port_used_1 = __importDefault(require("tcp-port-used"));
const split2_1 = __importDefault(require("split2"));
const logger_1 = __importDefault(require("@wdio/logger"));
const utils_1 = require("./utils");
const constants_1 = require("./constants");
const log = (0, logger_1.default)('geckodriver');
class GeckoDriverService {
    constructor(options, capabilities, config) {
        this.options = options;
        this.config = config;
        this.isMultiremote = !capabilities.browserName;
        this.port = this.options.port;
        this.path = this.options.path || constants_1.DEFAULT_PATH;
        this.outputDir = this.options.outputDir || config.outputDir;
        this.logFileName = this.options.logFileName || constants_1.DEFAULT_LOG_FILENAME;
        this.args = this.options.args || [];
    }
    beforeSession(config, capabilities) {
        return this._startDriver(capabilities);
    }
    afterSession() {
        return this._stopDriver();
    }
    _redirectLogStream() {
        if (!this.outputDir || !this.process || !this.process.stdout || !this.process.stderr) {
            return false;
        }
        const logFile = (0, utils_1.getFilePath)(this.outputDir, this.logFileName);
        /**
         * ensure file & directory exists
         */
        fs_extra_1.default.ensureFileSync(logFile);
        const logStream = fs_extra_1.default.createWriteStream(logFile, { flags: 'w' });
        this.process.stdout.pipe(logStream);
        this.process.stderr.pipe(logStream);
        return true;
    }
    _mapCapabilities(capabilities, port) {
        const options = {
            ...constants_1.LOCAL_OPTIONS,
            port,
            path: this.path
        };
        if (this.isMultiremote) {
            for (const cap of Object.values(capabilities)) {
                if ((0, utils_1.isFirefox)(cap.capabilities)) {
                    Object.assign(cap, options);
                }
            }
        }
        else if ((0, utils_1.isFirefox)(capabilities)) {
            Object.assign(capabilities, options);
        }
    }
    async _startDriver(capabilities) {
        if (!this.args.find((arg) => arg.startsWith('--log')) && this.config.logLevel) {
            this.args.push(`--log=${this.config.logLevel}`);
        }
        /**
         * set driver port
         */
        const port = this.port || await (0, get_port_1.default)();
        this.args.push(`--port=${port}`);
        /**
         * update capability connection options to connect
         * to chromedriver
         */
        this._mapCapabilities(capabilities, port);
        let command = this.geckodriverCustomPath || geckodriver_1.default.path;
        log.info(`Start Geckodriver (${command}) with args: ${this.args.join(' ')}`);
        if (!fs_extra_1.default.existsSync(command)) {
            log.warn('Could not find Geckodriver in default path: ', command);
            log.warn('Falling back to use global geckodriver bin');
            command = process && process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';
        }
        this.process = node_child_process_1.default.spawn(command, this.args);
        if (!this._redirectLogStream() && this.process.stdout && this.process.stderr) {
            this.process.stdout.pipe((0, split2_1.default)()).on('data', log.info.bind(log));
            this.process.stderr.pipe((0, split2_1.default)()).on('data', log.warn.bind(log));
        }
        await tcp_port_used_1.default.waitUntilUsed(port, constants_1.POLL_INTERVAL, constants_1.POLL_TIMEOUT);
        process.on('exit', this._stopDriver.bind(this));
        process.on('SIGINT', this._stopDriver.bind(this));
        process.on('uncaughtException', this._stopDriver.bind(this));
    }
    _stopDriver() {
        if (this.process) {
            this.process.kill();
            delete this.process;
        }
    }
}
exports.default = GeckoDriverService;
//# sourceMappingURL=index.js.map