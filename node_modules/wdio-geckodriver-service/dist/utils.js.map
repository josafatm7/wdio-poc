{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;;;;AAAA,0DAA4B;AAG5B,MAAM,oBAAoB,GAAG,eAAe,CAAA;AAE5C,SAAgB,SAAS,CAAE,GAA8B;IACrD,OAAO,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,KAAK,CAAA;AACtE,CAAC;AAFD,8BAEC;AAED;;;;;;;GAOG;AACH,SAAgB,WAAW,CAAE,QAAgB,EAAE,eAAuB;IAClE,IAAI,YAAY,GAAG,mBAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IACzC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,mBAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE;QACzD,YAAY,GAAG,mBAAI,CAAC,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,CAAA;KAC1D;IACD,OAAO,YAAY,CAAA;AACvB,CAAC;AAND,kCAMC","sourcesContent":["import path from 'node:path'\nimport { Capabilities } from '@wdio/types'\n\nconst FILE_EXTENSION_REGEX = /\\.[0-9a-z]+$/i\n\nexport function isFirefox (cap: Capabilities.Capabilities) {\n    return cap.browserName?.toLowerCase().includes('firefox') || false\n}\n\n/**\n * Resolves the given path into a absolute path and appends the\n * default filename as fallback when the provided path is a directory.\n *\n * @param  {String} logPath         relative file or directory path\n * @param  {String} defaultFilename default file name when filePath is a directory\n * @return {String}                 absolute file path\n */\nexport function getFilePath (filePath: string, defaultFilename: string) {\n    let absolutePath = path.resolve(filePath)\n    if (!FILE_EXTENSION_REGEX.test(path.basename(absolutePath))) {\n        absolutePath = path.join(absolutePath, defaultFilename)\n    }\n    return absolutePath\n}\n"]}